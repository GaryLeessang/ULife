package com.example.joe.cityumobile.greenDaoGenerated;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.joe.cityumobile.DataModel.DaoModel.Express;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXPRESS".
*/
public class ExpressDao extends AbstractDao<Express, Long> {

    public static final String TABLENAME = "EXPRESS";

    /**
     * Properties of entity Express.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ExpressId = new Property(0, long.class, "expressId", true, "_id");
        public final static Property BmobExpressId = new Property(1, String.class, "bmobExpressId", false, "BMOB_EXPRESS_ID");
        public final static Property Title = new Property(2, String.class, "Title", false, "TITLE");
        public final static Property Content = new Property(3, String.class, "Content", false, "CONTENT");
        public final static Property PostType = new Property(4, int.class, "PostType", false, "POST_TYPE");
        public final static Property Size = new Property(5, String.class, "Size", false, "SIZE");
        public final static Property Priority = new Property(6, String.class, "Priority", false, "PRIORITY");
        public final static Property Commission = new Property(7, int.class, "Commission", false, "COMMISSION");
        public final static Property CreateTime = new Property(8, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ExpireTime = new Property(9, java.util.Date.class, "expireTime", false, "EXPIRE_TIME");
    }


    public ExpressDao(DaoConfig config) {
        super(config);
    }
    
    public ExpressDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXPRESS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: expressId
                "\"BMOB_EXPRESS_ID\" TEXT," + // 1: bmobExpressId
                "\"TITLE\" TEXT," + // 2: Title
                "\"CONTENT\" TEXT," + // 3: Content
                "\"POST_TYPE\" INTEGER NOT NULL ," + // 4: PostType
                "\"SIZE\" TEXT," + // 5: Size
                "\"PRIORITY\" TEXT," + // 6: Priority
                "\"COMMISSION\" INTEGER NOT NULL ," + // 7: Commission
                "\"CREATE_TIME\" INTEGER," + // 8: createTime
                "\"EXPIRE_TIME\" INTEGER);"); // 9: expireTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXPRESS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Express entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getExpressId());
 
        String bmobExpressId = entity.getBmobExpressId();
        if (bmobExpressId != null) {
            stmt.bindString(2, bmobExpressId);
        }
 
        String Title = entity.getTitle();
        if (Title != null) {
            stmt.bindString(3, Title);
        }
 
        String Content = entity.getContent();
        if (Content != null) {
            stmt.bindString(4, Content);
        }
        stmt.bindLong(5, entity.getPostType());
 
        String Size = entity.getSize();
        if (Size != null) {
            stmt.bindString(6, Size);
        }
 
        String Priority = entity.getPriority();
        if (Priority != null) {
            stmt.bindString(7, Priority);
        }
        stmt.bindLong(8, entity.getCommission());
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(9, createTime.getTime());
        }
 
        java.util.Date expireTime = entity.getExpireTime();
        if (expireTime != null) {
            stmt.bindLong(10, expireTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Express entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getExpressId());
 
        String bmobExpressId = entity.getBmobExpressId();
        if (bmobExpressId != null) {
            stmt.bindString(2, bmobExpressId);
        }
 
        String Title = entity.getTitle();
        if (Title != null) {
            stmt.bindString(3, Title);
        }
 
        String Content = entity.getContent();
        if (Content != null) {
            stmt.bindString(4, Content);
        }
        stmt.bindLong(5, entity.getPostType());
 
        String Size = entity.getSize();
        if (Size != null) {
            stmt.bindString(6, Size);
        }
 
        String Priority = entity.getPriority();
        if (Priority != null) {
            stmt.bindString(7, Priority);
        }
        stmt.bindLong(8, entity.getCommission());
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(9, createTime.getTime());
        }
 
        java.util.Date expireTime = entity.getExpireTime();
        if (expireTime != null) {
            stmt.bindLong(10, expireTime.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Express readEntity(Cursor cursor, int offset) {
        Express entity = new Express( //
            cursor.getLong(offset + 0), // expressId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bmobExpressId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Content
            cursor.getInt(offset + 4), // PostType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Size
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Priority
            cursor.getInt(offset + 7), // Commission
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // createTime
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)) // expireTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Express entity, int offset) {
        entity.setExpressId(cursor.getLong(offset + 0));
        entity.setBmobExpressId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPostType(cursor.getInt(offset + 4));
        entity.setSize(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPriority(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCommission(cursor.getInt(offset + 7));
        entity.setCreateTime(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setExpireTime(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Express entity, long rowId) {
        entity.setExpressId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Express entity) {
        if(entity != null) {
            return entity.getExpressId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Express entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
