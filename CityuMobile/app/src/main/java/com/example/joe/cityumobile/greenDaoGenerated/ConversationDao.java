package com.example.joe.cityumobile.greenDaoGenerated;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.joe.cityumobile.DataModel.DaoModel.Conversation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONVERSATION".
*/
public class ConversationDao extends AbstractDao<Conversation, Long> {

    public static final String TABLENAME = "CONVERSATION";

    /**
     * Properties of entity Conversation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ConId = new Property(0, Long.class, "conId", true, "_id");
        public final static Property TargetUid = new Property(1, String.class, "targetUid", false, "targetUid");
        public final static Property TargetNickname = new Property(2, String.class, "targetNickname", false, "nickName");
        public final static Property Avatar = new Property(3, int.class, "avatar", false, "avatar");
        public final static Property UnreadCount = new Property(4, int.class, "unreadCount", false, "unreadCount");
        public final static Property Flag = new Property(5, int.class, "flag", false, "flag");
    }


    public ConversationDao(DaoConfig config) {
        super(config);
    }
    
    public ConversationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONVERSATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: conId
                "\"targetUid\" TEXT," + // 1: targetUid
                "\"nickName\" TEXT," + // 2: targetNickname
                "\"avatar\" INTEGER NOT NULL ," + // 3: avatar
                "\"unreadCount\" INTEGER NOT NULL ," + // 4: unreadCount
                "\"flag\" INTEGER NOT NULL );"); // 5: flag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONVERSATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Conversation entity) {
        stmt.clearBindings();
 
        Long conId = entity.getConId();
        if (conId != null) {
            stmt.bindLong(1, conId);
        }
 
        String targetUid = entity.getTargetUid();
        if (targetUid != null) {
            stmt.bindString(2, targetUid);
        }
 
        String targetNickname = entity.getTargetNickname();
        if (targetNickname != null) {
            stmt.bindString(3, targetNickname);
        }
        stmt.bindLong(4, entity.getAvatar());
        stmt.bindLong(5, entity.getUnreadCount());
        stmt.bindLong(6, entity.getFlag());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Conversation entity) {
        stmt.clearBindings();
 
        Long conId = entity.getConId();
        if (conId != null) {
            stmt.bindLong(1, conId);
        }
 
        String targetUid = entity.getTargetUid();
        if (targetUid != null) {
            stmt.bindString(2, targetUid);
        }
 
        String targetNickname = entity.getTargetNickname();
        if (targetNickname != null) {
            stmt.bindString(3, targetNickname);
        }
        stmt.bindLong(4, entity.getAvatar());
        stmt.bindLong(5, entity.getUnreadCount());
        stmt.bindLong(6, entity.getFlag());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Conversation readEntity(Cursor cursor, int offset) {
        Conversation entity = new Conversation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // conId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // targetUid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // targetNickname
            cursor.getInt(offset + 3), // avatar
            cursor.getInt(offset + 4), // unreadCount
            cursor.getInt(offset + 5) // flag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Conversation entity, int offset) {
        entity.setConId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTargetUid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTargetNickname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAvatar(cursor.getInt(offset + 3));
        entity.setUnreadCount(cursor.getInt(offset + 4));
        entity.setFlag(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Conversation entity, long rowId) {
        entity.setConId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Conversation entity) {
        if(entity != null) {
            return entity.getConId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Conversation entity) {
        return entity.getConId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
