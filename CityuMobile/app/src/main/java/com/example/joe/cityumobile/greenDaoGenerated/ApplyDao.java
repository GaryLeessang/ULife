package com.example.joe.cityumobile.greenDaoGenerated;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.joe.cityumobile.DataModel.DaoModel.Apply;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APPLY".
*/
public class ApplyDao extends AbstractDao<Apply, Long> {

    public static final String TABLENAME = "APPLY";

    /**
     * Properties of entity Apply.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "User Id");
        public final static Property UserName = new Property(2, String.class, "userName", false, "Username");
        public final static Property Avatar = new Property(3, int.class, "avatar", false, "Avatar");
        public final static Property Note = new Property(4, String.class, "note", false, "Note");
        public final static Property CreateTime = new Property(5, Long.class, "createTime", false, "Create Time");
        public final static Property ReferencePostId = new Property(6, String.class, "referencePostId", false, "Ref Post");
        public final static Property IsOffline = new Property(7, boolean.class, "isOffline", false, "IS_OFFLINE");
        public final static Property State = new Property(8, int.class, "state", false, "STATE");
    }


    public ApplyDao(DaoConfig config) {
        super(config);
    }
    
    public ApplyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APPLY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"User Id\" TEXT," + // 1: userId
                "\"Username\" TEXT," + // 2: userName
                "\"Avatar\" INTEGER NOT NULL ," + // 3: avatar
                "\"Note\" TEXT," + // 4: note
                "\"Create Time\" INTEGER," + // 5: createTime
                "\"Ref Post\" TEXT," + // 6: referencePostId
                "\"IS_OFFLINE\" INTEGER NOT NULL ," + // 7: isOffline
                "\"STATE\" INTEGER NOT NULL );"); // 8: state
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APPLY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Apply entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
        stmt.bindLong(4, entity.getAvatar());
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(5, note);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(6, createTime);
        }
 
        String referencePostId = entity.getReferencePostId();
        if (referencePostId != null) {
            stmt.bindString(7, referencePostId);
        }
        stmt.bindLong(8, entity.getIsOffline() ? 1L: 0L);
        stmt.bindLong(9, entity.getState());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Apply entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
        stmt.bindLong(4, entity.getAvatar());
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(5, note);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(6, createTime);
        }
 
        String referencePostId = entity.getReferencePostId();
        if (referencePostId != null) {
            stmt.bindString(7, referencePostId);
        }
        stmt.bindLong(8, entity.getIsOffline() ? 1L: 0L);
        stmt.bindLong(9, entity.getState());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Apply readEntity(Cursor cursor, int offset) {
        Apply entity = new Apply( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.getInt(offset + 3), // avatar
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // note
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // createTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // referencePostId
            cursor.getShort(offset + 7) != 0, // isOffline
            cursor.getInt(offset + 8) // state
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Apply entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAvatar(cursor.getInt(offset + 3));
        entity.setNote(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setReferencePostId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsOffline(cursor.getShort(offset + 7) != 0);
        entity.setState(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Apply entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Apply entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Apply entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
