package com.example.joe.cityumobile.greenDaoGenerated;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.joe.cityumobile.DataModel.DaoModel.ChatObj;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_OBJ".
*/
public class ChatObjDao extends AbstractDao<ChatObj, Long> {

    public static final String TABLENAME = "CHAT_OBJ";

    /**
     * Properties of entity ChatObj.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ChatId = new Property(0, Long.class, "chatId", true, "_id");
        public final static Property SenderId = new Property(1, String.class, "senderId", false, "senderId");
        public final static Property ReceiverId = new Property(2, String.class, "receiverId", false, "receiverId");
        public final static Property CreateTime = new Property(3, Long.class, "createTime", false, "createTime");
        public final static Property Content = new Property(4, String.class, "content", false, "content");
        public final static Property IsOfflineMsg = new Property(5, boolean.class, "isOfflineMsg", false, "isOffline");
    }


    public ChatObjDao(DaoConfig config) {
        super(config);
    }
    
    public ChatObjDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_OBJ\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: chatId
                "\"senderId\" TEXT," + // 1: senderId
                "\"receiverId\" TEXT," + // 2: receiverId
                "\"createTime\" INTEGER," + // 3: createTime
                "\"content\" TEXT," + // 4: content
                "\"isOffline\" INTEGER NOT NULL );"); // 5: isOfflineMsg
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_OBJ\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatObj entity) {
        stmt.clearBindings();
 
        Long chatId = entity.getChatId();
        if (chatId != null) {
            stmt.bindLong(1, chatId);
        }
 
        String senderId = entity.getSenderId();
        if (senderId != null) {
            stmt.bindString(2, senderId);
        }
 
        String receiverId = entity.getReceiverId();
        if (receiverId != null) {
            stmt.bindString(3, receiverId);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(4, createTime);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
        stmt.bindLong(6, entity.getIsOfflineMsg() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatObj entity) {
        stmt.clearBindings();
 
        Long chatId = entity.getChatId();
        if (chatId != null) {
            stmt.bindLong(1, chatId);
        }
 
        String senderId = entity.getSenderId();
        if (senderId != null) {
            stmt.bindString(2, senderId);
        }
 
        String receiverId = entity.getReceiverId();
        if (receiverId != null) {
            stmt.bindString(3, receiverId);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(4, createTime);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
        stmt.bindLong(6, entity.getIsOfflineMsg() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChatObj readEntity(Cursor cursor, int offset) {
        ChatObj entity = new ChatObj( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // chatId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // senderId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // receiverId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // createTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.getShort(offset + 5) != 0 // isOfflineMsg
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatObj entity, int offset) {
        entity.setChatId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSenderId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setReceiverId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsOfflineMsg(cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatObj entity, long rowId) {
        entity.setChatId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatObj entity) {
        if(entity != null) {
            return entity.getChatId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatObj entity) {
        return entity.getChatId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
